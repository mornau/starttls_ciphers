#!/bin/bash
#
# Enumerates STARTTLS cipher suite support at a given host/port
#
# Copyright (C) 2013 Moritz Naumann, code[AT]moritz-naumann.com
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Dependencies:
#    * /bin/bash: Bash 2.0 or greater
#    * openssl: OpenSSL (a version with s_client --starttls support)
#    * nc: OpenBSD netcat
#    * grep, sed: with simple regular expression syntax
#    * basename, cat, date, head, mktemp, tee, test
#

VERSION=0.1

THISSCRIPT=`basename $0`
LOGFILE=/tmp/$THISSCRIPT.log
TEMPFILE=`mktemp $THISSCRIPT_XXXXXXXXXX`

print_usage() {
  echo "Usage:"
  echo "  $THISSCRIPT [-q|--quiet|-s|--supported] <HOSTNAME|IP_ADDRESS>:<PORT> <PROTOCOL>"
  echo "  $THISSCRIPT <-h|--help|--version>"
  echo ""
  echo "  Use --quiet to only output ciphers suites with a prefix (no extra text)."
  echo "  Use --supported to only list cipher suites the server supports."
  echo ""
  echo "  <PROTOCOL> is one of the application protocols which your OpenSSL version supports"
  echo "  STARTTLS initialization for. For a list of supported application protocols, run"
  echo "    openssl s_client --help"
  echo "  and review the description of the --starttls option."
  echo ""
  echo "Examples:"
  echo "  $THISSCRIPT -s mail.example.org:587 smtp"
  echo "  $THISSCRIPT --version"
  echo ""
}

if [ "$1" = '--help' -o "$1" = '-h' ]
then
  echo "$THISSCRIPT uses OpenSSL with STARTTLS initialization to enumerate SSL cipher suites"
  echo "supported at a given host and TCP port, with any of the application protocols your"
  echo "OpenSSL version supports."
  echo ""
  print_usage
  echo ""
  echo "Interpreting the output:"
  echo "  A successful run of this script will result in cipher suites printed prefixed with"
  echo "  a single character:"
  echo ""
  echo "  +   indicates that the listed cipher suite is supported by the server"
  echo "  -   indicates that the listed cipher suite is not supported by the server"
  echo "  E   indicates that an error occurred while testing for this cipher suite"
  echo ""
  exit 0
fi

if [ "$1" = '--version' ]
then
  echo "$THISSCRIPT version $VERSION"
  echo "Copyright (C) 2013 Moritz Naumann, code[AT]moritz-naumann.com"
  echo ""
  echo "License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>"
  echo ""
  echo "This is free software; you are free to change and redistribute it."
  echo "There is NO WARRANTY, to the extent permitted by law."
  echo ""
  exit 0
fi

if [ "$1" = '--quiet' -o "$1" = '-q' ]
then
  QUIET=1
  shift
else
  QUIET=0
fi

if [ "$1" = '--supported' -o "$1" = '-s' ]
then 
  SUPPORTED=1
  shift
else
  SUPPORTED=0
fi

if [ "$1" = '' -o "$2" = '' ]
then
  echo "Error: Missing parameters. Try --help." >&2
  echo ""
  print_usage
  exit 1
fi

# Format: hostname:port ot ip:port
HOST=`echo $1 | sed -e 's/^\(.*\):[1-9][0-9]*$/\1/'`
PORT=`echo $1 | sed -e 's/^.*:\([1-9][0-9]*\)$/\1/'`

# Should be one of the application protocols which openssl supports StartTLS
# initialization for - review the description of the --starttls option:
#   openssl s_client --help
PROTOCOL=$2

# Check for dependencies
which nc >/dev/null 2>&1
if [ "$?" != '0' ]
then
  echo "Error: 'nc' command is not available. Please install the OpenBSD netcat variant." >&2
  echo ""
  print_usage
  exit 1
fi

LANG=C nc -h 2>&1 | grep -qFi 'openbsd'
if [ "$?" != '0' ]
then
  echo "Error: Unsupported variant of the 'nc' command. Please install the OpenBSD netcat variant." >&2
  echo ""
  print_usage
  exit 1
fi

which openssl >/dev/null 2>&1
if [ "$?" != '0' ]
then
  echo "Error: 'openssl' command is not available. Please install OpenSSL." >&2
  echo ""
  print_usage
  exit 1
fi

LANG=C openssl s_client --help 2>&1 | grep -q '^ -starttls prot'
if [ "$?" != '0' ]
then
  echo "Error: Your version of OpenSSL does not seem to be compatible." >&2
  echo ""
  print_usage
  exit 1
fi


if [ -f "$LOGFILE" ]; then mv -f $LOGFILE $LOGFILE.old; fi
touch $LOGFILE
if [ -f "$TEMPFILE" ]; then rm -f $TEMPFILE; fi
touch $TEMPFILE

if [ "$QUIET" != '1' ]; then echo "Enumerating StartTLS ciphers at $HOST:$PORT ($PROTOCOL)"; fi
if [ "$QUIET" != '1' ]; then echo "Log file: $LOGFILE"; fi
echo "Enumerating StartTLS ciphers at $HOST:$PORT ($PROTOCOL)" >$LOGFILE
openssl version  >> $LOGFILE
date -u >> $LOGFILE
if [ "$QUIET" != '1' ]; then echo ""; fi
echo "" >$LOGFILE

# Test connectivity (and thus format of $HOST and $PORT arguments)
nc -d -q0 -w5 -z $HOST $PORT >/dev/null 2>&1
if [ "$?" != '0' ]
then
  echo "Error: Failed to connect to $HOST:$PORT (using 'nc')." >&2
  echo ""
  rm -f $TEMPFILE
  exit 1
fi

for CIPHER in `openssl ciphers | tr ':' ' '`
do 
  echo >> $LOGFILE
  echo '================================================================================' >> $LOGFILE
  echo >> $LOGFILE
  echo "Testing $CIPHER ..." >> $LOGFILE
  echo >> $LOGFILE
  echo -e '^D' | openssl s_client -crlf -cipher $CIPHER -starttls $PROTOCOL -connect $HOST:$PORT > $TEMPFILE 2>&1
  STATUS=$?
  cat $TEMPFILE >> $LOGFILE
  if [ "$STATUS" = '0' ]
  then 
    echo '+ '"$CIPHER" | tee -a $LOGFILE
  else 
    head -n1 $TEMPFILE | grep -Fq ':error:'
    if [ "$?" = '0' ]
    then
      if [ "$SUPPORTED" != '1' ]
      then
        echo '- '"$CIPHER" | tee -a $LOGFILE
      fi
    else
      echo 'E '"$CIPHER" | tee -a $LOGFILE
    fi
  fi
done

rm -f $TEMPFILE
if [ "$QUIET" != '1' ]; then echo ""; fi
echo "" >$LOGFILE
if [ "$QUIET" != '1' ]; then echo "Test complete."; fi
